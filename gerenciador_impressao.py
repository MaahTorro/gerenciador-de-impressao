import time
from collections import deque

# C√≥digos ANSI para cores
RED = "\033[91m"      # Vermelho
GREEN = "\033[92m"    # Verde 
YELLOW = "\033[93m"   # Amarelo
CYAN = "\033[96m"     # Ciano 
BLUE = "\033[94m"     # Azul 
RESET = "\033[0m"     


class GerenciadorImpressao:
    def __init__(self):
        self.fila_alta = deque()
        self.fila_media = deque()
        self.fila_baixa = deque()
        self.documentos = set()

    def adicionar_documento(self, nome, prioridade):
        if nome in self.documentos:
            print(RED + f"‚ùå Erro: O documento '{nome}' j√° existe." + RESET)
            return False

        if prioridade == "alta":
            self.fila_alta.append(nome)
        elif prioridade == "media":
            self.fila_media.append(nome)
        elif prioridade == "baixa":
            self.fila_baixa.append(nome)
        else:
            print(RED + f"‚ö†Ô∏è Erro: Prioridade '{prioridade}' inv√°lida." + RESET)
            return False

        self.documentos.add(nome)
        print(GREEN + f"‚úÖ Documento '{nome}' adicionado com sucesso!" + RESET)
        return True

    def processar_proximo(self):
        if self.fila_alta:
            doc = self.fila_alta.popleft()
        elif self.fila_media:
            doc = self.fila_media.popleft()
        elif self.fila_baixa:
            doc = self.fila_baixa.popleft()
        else:
            print(RED + "üö´ N√£o h√° documentos para processar." + RESET)
            return None

        self.documentos.remove(doc)
        print(YELLOW + f"üñ®Ô∏è Processando (imprimindo) o documento: {doc}" + RESET)
        time.sleep(1.5)  
        print(GREEN + f"‚úÖ Documento '{doc}' impresso com sucesso!" + RESET)
        return doc

    def relatorio(self):
        print(CYAN + "\nüìä --- RELAT√ìRIO DE FILA --- üìä" + RESET)
        print(f"üî¥ Prioridade Alta: {list(self.fila_alta)}")
        print(f"üü° Prioridade M√©dia: {list(self.fila_media)}")
        print(f"üîµ Prioridade Baixa: {list(self.fila_baixa)}")
        print(CYAN + "-----------------------------------\n" + RESET)

def menu():
    print("\n" + CYAN + "‚ïê" * 45 + RESET)
    print(GREEN + "üìÑ GERENCIADOR DE IMPRESS√ÉO üìÑ".center(45) + RESET)
    print(CYAN + "‚ïê" * 45 + RESET)
    print("\nO que deseja fazer?")
    print(BLUE + "1Ô∏è‚É£  - Adicionar uma impress√£o" + RESET)
    print(BLUE + "2Ô∏è‚É£  - Processar pr√≥xima impress√£o" + RESET)
    print(BLUE + "3Ô∏è‚É£  - Ver o Relat√≥rio" + RESET)
    print(RED + "4Ô∏è‚É£  - Sair" + RESET)
    print(CYAN + "‚ïê" * 45 + RESET)

    return input("‚û§ Escolha uma op√ß√£o: ")


def adicionar_mais():
    while True:
        escolha = input(YELLOW + "\n‚ûï Deseja adicionar mais uma impress√£o? (S/N): " + RESET).lower()
        if escolha in ['s', 'n']:
            return escolha == 's'
        print(RED + "‚ö†Ô∏è Por favor, responda com 'S' para Sim ou 'N' para N√£o." + RESET)


def main():
    gerenciador = GerenciadorImpressao()

    while True:
        escolha = menu()

        if escolha == '1':
            while True:
                nome = input(YELLOW + "üìù Nome do documento: " + RESET)
                prioridade = input(YELLOW + "‚ö° Prioridade (alta/media/baixa): " + RESET).lower()
                if gerenciador.adicionar_documento(nome, prioridade):
                    if not adicionar_mais():
                        print("\nüîô Voltando ao menu principal.")
                        break
        elif escolha == '2':
            gerenciador.processar_proximo()
        elif escolha == '3':
            gerenciador.relatorio()
        elif escolha == '4':
            print(RED + "\nüö™ Programa encerrado. At√© logo!" + RESET)
            break
        else:
            print(RED + "‚ùå Op√ß√£o inv√°lida. Por favor, escolha 1, 2, 3 ou 4." + RESET)


if __name__ == "__main__":
    main()
